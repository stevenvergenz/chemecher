#include "iomanager.h"

IOManager *iomgr = new IOManager();

IOManager::IOManager()
{}

bool IOManager::saveToCM3(QString mech, QString sim)
{
	/***************** write to the mechanism file *****************/
	
	//open the mechanism file
	QFile mfile(mech);
	if( !mfile.open( QFile::WriteOnly ) )
		return setError( FS_ERROR, "Opening file "+mech );

	//print header
	QTextStream mOut( &mfile );
	mOut << "'Generated by CheMecher v4 on ";
	mOut << QDateTime::currentDateTime().toString("ddd MMMM d yyyy hh:mm ap") << endl;
	mOut << "'Created in conjunction with simulation: "+QFileInfo(sim).fileName() << endl;
	mOut << "'Name: " + (mix->mechName.isEmpty() ? "<empty>" : mix->mechName) << endl;
	mOut << "'Desc: " + (mix->mechDesc.isEmpty() ? "<empty>" : mix->mechDesc) << endl;
	mOut << endl;
	
	//write out the cpd list
	mOut << "'compound list" << endl;
	mOut << mix->CpdList.size() << " 'number of compounds" << endl;
	for(int i=0; i<mix->CpdList.size(); i++)
		mOut << mix->CpdList[i]->tov3String() << endl;
	mOut << endl;

	//write out the step list
	mOut << "'step list" << endl;
	mOut << mix->StepList.size() << " 'number of steps" << endl;
	for(int i=0; i<mix->StepList.size(); i++)
		mOut << mix->StepList[i]->tov3String() << endl;
	mOut << endl;

	mfile.close();

	/****************** write to the simulation file *****************/

	//open the simulation file
	QFile sfile(sim);
	if( !sfile.open( QFile::WriteOnly ) ){
		setError( FS_ERROR, "Opening file "+sim );
		return false;
	}

	//print header
	QTextStream sOut( &sfile );
	sOut << "'Generated by CheMecher v4 on ";
	sOut << QDateTime::currentDateTime().toString("ddd MMMM d yyyy hh:mm ap") << endl;
	sOut << "'Created in conjunction with mechanism: "+QFileInfo(mech).fileName() << endl;
	sOut << endl;

	//output parameters
	sOut << "calcstep=" << mix->timeStep << endl;
	sOut << "reportstep=" << mix->reportStep << endl;
	sOut << "maxtime=" << mix->endTime-mix->startTime
		<< "   'from "<<mix->startTime<<" to "<<mix->endTime << endl;
	sOut << "order=" << mix->order << endl;
	sOut << "method=" << mix->method << endl;
	sOut << "transition=" << mix->transition << endl;
	sOut << endl;
	sOut << "autostep=" << (mix->autostep ? "yes" : "no") << endl;
	sOut << "gateband=" << (mix->autostep ? QString::number(mix->gateband) : "0") << endl;
	sOut << "shifttest=" << (mix->autostep ? QString::number(mix->shifttest) : "0") << endl;
	sOut << "maxreduce=" << (mix->autostep ? QString::number(mix->maxreduce) : "0") << endl;
	sOut << "stepfactor=" << (mix->autostep ? QString::number(mix->stepfactor) : "0") << endl;
	sOut << endl;

	//output the initial concentrations
	sOut << "'initial concentrations" << endl;
	sOut << "'any species not listed are assumed to have an initial concentration of zero" << endl;
	for(int i=0; i<mix->CpdList.size(); i++)
		sOut << mix->CpdList[i]->toString()
		<< QString().fill(' ',mix->maxCpdIdLen()+1-mix->CpdList[i]->toString().length())
		<< mix->CpdList[i]->initialConc() << endl;

	//done writing, close file
	sfile.close();

	return true;
}

bool IOManager::loadFromCM3(QString mech, QString sim)
{
	Mix newmix;
	QFile mfile(mech), sfile(sim);

	/********************* start parsing the mech file ********************/

	//open the mech file
	if( !mfile.open( QIODevice::ReadOnly | QIODevice::Text ) )
		return setError( FS_ERROR, "Opening file "+mech );
	
	//start reading
	QTextStream min(&mfile);
	int linecounter = 0;
	QString buffer;
	bool ok = true;

	// try to parse the name and description from the file
	buffer = min.readLine();
	linecounter++;
	while( buffer.left( buffer.indexOf("'") ).simplified() == "" ) {
		if( buffer.left(6).toLower() == "'name:" ) {
			newmix.mechName = buffer.mid(6).trimmed();
		}
		if( buffer.left(6).toLower() == "'desc:" ) {
			newmix.mechDesc = buffer.mid(6).trimmed();
		}
		buffer = min.readLine();
		linecounter++;
	}
	
	buffer = buffer.left( buffer.indexOf("'") ).simplified();
	
	//read the number of species
	//buffer = getLine( min, linecounter ); // this is already done above
	int numcpds = buffer.toInt(&ok);
	if( !ok || numcpds<1)
		return setError( PARSE_ERROR, "Positive integer expected", linecounter );
	
	//read the species
	QStringList parts;
	for(int i=0; i<numcpds; i++)
	{
		parts = getLine( min, linecounter ).split(' ');
		if( parts.length()!=4 )
			return setError( PARSE_ERROR, "Wrong number of elements", linecounter );
		Cpd *cpd = new Cpd();
		
		if( parts[0].length()>6 )
			return setError( PARSE_ERROR, "Short name too long (must be no more than 7 characters)", linecounter );
		cpd->setShortName( parts[0] );
		cpd->setState( parts[1], &ok );
		if( !ok )
			return setError( PARSE_ERROR, "Invalid state identifier \"" + parts[1] + "\"", linecounter );
		cpd->setThreshold( parts[2].toDouble(&ok) );
		if( !ok || cpd->threshold()<0 )
			return setError( PARSE_ERROR, "Positive double expected in 3rd field", linecounter );
		cpd->setSharpness( parts[3].toDouble(&ok) );
		if( !ok || cpd->sharpness()<0 )
			return setError( PARSE_ERROR, "Positive double expected in 4th field", linecounter );
		
		newmix.addCpd( cpd );
	}
	
	// read the number of steps
	buffer = getLine( min, linecounter );
	int numsteps = buffer.toInt(&ok);
	if( !ok || numsteps<1)
		return setError( PARSE_ERROR, "Positive integer expected", linecounter );
	
	// read the steps
	for(int i=0; i<numsteps; i++)
	{
		// get the line and split it
		parts = getLine( min, linecounter ).split(' ');
		if( parts.length()!=3 )
			return setError( PARSE_ERROR, "Expected three elements", linecounter );
		
		// declare and name the new step
		Step *step = new Step();
		step->setName( QString("Step %1").arg(i+1) );
		
		// get the lists of reactants and products
		if( parts[0].split(">").length()!=2 )
			return setError( PARSE_ERROR, "Improperly formed step", linecounter );
		QStringList reactants = parts[0].split(">")[0].split("+");
		QStringList products  = parts[0].split(">")[1].split("+");
		
		if( reactants.length()>3 || products.length()>3 )
			return setError( PARSE_ERROR, "No more than three reactants or products allowed", linecounter );
		
		// add the reactants and products
		for( int i=0; i<reactants.size(); i++ ) {
			if( !step->addReactant( newmix.getCpdById(reactants[i]) ) )
				return setError( PARSE_ERROR, "Undefined species \"" + reactants[i] + "\"", linecounter );
		}
		for( int i=0; i<products.size(); i++ ) {
			if( !step->addProduct( newmix.getCpdById(products[i]) ) )
				return setError( PARSE_ERROR, "Undefined species \"" + reactants[i] + "\"", linecounter );
		}
		
		step->setKPlus( parts[1].toDouble(&ok) );
		if( !ok || step->kPlus()<0 )
			return setError( PARSE_ERROR, "Positive double expected in 2rd field", linecounter );
		step->setKMinus( parts[2].toDouble(&ok) );
		if( !ok || step->kPlus()<0 )
			return setError( PARSE_ERROR, "Positive double expected in 3rd field", linecounter );
		
		newmix.addStep( step );
	}
	
	//// Parse the simulation file ////
	
	//open the sim file
	if( !sfile.open( QIODevice::ReadOnly | QIODevice::Text ) )
		return setError( FS_ERROR, "Opening file "+sim );
	
	//start reading
	QTextStream sin(&sfile);
	linecounter = 0;
	buffer = "";
	ok = true;
	
	
	
	mix->clone( &newmix );
	status = LOADED_CM3;
	return true;
}

// gets the next line of valid input
QString IOManager::getLine(QTextStream& txt, int &linecounter)
{
	QString ret = "";
	while( ret=="" && !txt.atEnd() ) {
		ret = txt.readLine();
		// removes comments and simplifies whitespace
		ret = ret.left( ret.indexOf("'") ).simplified();
		linecounter++;
	}
	return ret;
}

// always returns false so that an error can be set with a single statement:
//    return setError( <stat>, <errmsg>, <linenum> );
bool IOManager::setError( Status stat, QString errmsg, int linenum )
{
	status = stat;
	message = "Error";
	if( linenum>=0 )
		message += " (" + QString::number(linenum) + ")";
	message += ": " + errmsg;
	return false;
}

// save the currently loaded mechanism in XML format
bool IOManager::saveToCM4(QString filename)
{
	//open the simulation file
	QFile sfile(filename);
	if( !sfile.open( QFile::WriteOnly ) )
		return setError( FS_ERROR, "Error opening file "+filename );
	
	QString *fcontents = new QString();
	
	/************* Open the file, write headers ************/
	QXmlStreamWriter stream(fcontents);
	stream.setAutoFormatting(true);
	stream.writeStartDocument();
	
	stream.writeStartElement("Mechanism");
	stream.writeAttribute("name", mix->mechName);
	stream.writeTextElement("MechDescription", mix->mechDesc);
	
	int i;
	
	/************ Write the Species List ***************/
	stream.writeStartElement("CpdList");
	for(i=0; i<mix->CpdList.size(); i++)
	{
		stream.writeStartElement("Cpd");
		stream.writeAttribute("name", mix->CpdList[i]->shortName());
		stream.writeAttribute("state", Cpd::STATES[mix->CpdList[i]->state()]);
		stream.writeEmptyElement("LongName");
		stream.writeAttribute("value", mix->CpdList[i]->longName());
		stream.writeEmptyElement("Concentration");
		stream.writeAttribute("value", QString::number(mix->CpdList[i]->initialConc()));
		stream.writeEmptyElement("Threshold");
		stream.writeAttribute("value", QString::number(mix->CpdList[i]->threshold()));
		stream.writeEmptyElement("Sharpness");
		stream.writeAttribute("value", QString::number(mix->CpdList[i]->sharpness()));
		stream.writeEmptyElement("Transition");
		stream.writeAttribute("value", Cpd::TRANS[mix->CpdList[i]->transition()]);
		stream.writeEndElement(); //Cpd
	}
	stream.writeEndElement(); //CpdList
	
	/******************* Write the Step List ******************/
	stream.writeStartElement("StepList");
	for(i=0; i<mix->StepList.size(); i++)
	{
		stream.writeStartElement("Step");
		stream.writeAttribute("name", mix->StepList[i]->name());
		stream.writeTextElement("Description", mix->StepList[i]->desc());
		stream.writeEmptyElement("RatePlus");
		stream.writeAttribute("value", QString::number(mix->StepList[i]->kPlus()));
		stream.writeEmptyElement("RateMinus");
		stream.writeAttribute("value", QString::number(mix->StepList[i]->kMinus()));
		
		//write the reagents of the step
		int j;
		stream.writeStartElement("ReactantList");
		for(j=0; j<mix->StepList[i]->reactantList().size(); j++){
			stream.writeEmptyElement("Reactant");
			stream.writeAttribute("id", mix->StepList[i]->reactantList()[j]->toString());
		}
		stream.writeEndElement(); //ReactantList
		
		stream.writeStartElement("ProductList");
		for(j=0; j<mix->StepList[i]->productList().size(); j++){
			stream.writeEmptyElement("Product");
			stream.writeAttribute("id", mix->StepList[i]->productList()[j]->toString());
		}
		stream.writeEndElement(); //ProductList
		
		stream.writeEndElement(); //Step
	}
	stream.writeEndElement(); //StepList
	
	/************** Start writing the simparams **************/
	stream.writeStartElement("SimParams");

	stream.writeEmptyElement("TimeStep");
	stream.writeAttribute("value", QString::number(mix->timeStep));
	stream.writeEmptyElement("ReportStep");
	stream.writeAttribute("value", QString::number(mix->reportStep));
	stream.writeEmptyElement("StartTime");
	stream.writeAttribute("value", QString::number(mix->startTime));
	stream.writeEmptyElement("EndTime");
	stream.writeAttribute("value", QString::number(mix->endTime));
	stream.writeEmptyElement("DebugStart");
	stream.writeAttribute("value", QString::number(mix->debugStart));
	stream.writeEmptyElement("DebugEnd");
	stream.writeAttribute("value", QString::number(mix->debugEnd));
	stream.writeEmptyElement("Precision");
	stream.writeAttribute("value", QString::number(mix->precision));
	stream.writeEmptyElement("Order");
	stream.writeAttribute("value", QString::number(mix->order));
	stream.writeEmptyElement("Method");
	stream.writeAttribute("value", mix->method);
	stream.writeEmptyElement("Transition");
	stream.writeAttribute("value", mix->transition);
	stream.writeEmptyElement("Autostep");
	stream.writeAttribute("value", (mix->autostep ? "true" : "false"));
	stream.writeEmptyElement("Gateband");
	stream.writeAttribute("value", QString::number(mix->gateband));
	stream.writeEmptyElement("ShiftTest");
	stream.writeAttribute("value", QString::number(mix->shifttest));
	stream.writeEmptyElement("MaxReduce");
	stream.writeAttribute("value", QString::number(mix->maxreduce));
	stream.writeEmptyElement("StepFactor");
	stream.writeAttribute("value", QString::number(mix->stepfactor));

	stream.writeEndElement(); //SimParams
	
	stream.writeEndElement(); //Mechanism
	
	//finish writing
	stream.writeEndDocument();
	
	// output to the file
	sfile.write( fcontents->toAscii() );
	sfile.close();
	return true;
}

bool IOManager::loadFromCM4(QString filename)
{
	Mix newmix;

	//open the simulation file
	QFile sfile(filename);
	if( !sfile.open( QFile::ReadOnly ) )
		return setError( FS_ERROR, "Error opening file "+filename );

	/*
	  The doc.setContent() function actually loads the file into a tree structure composed of QDomNodes.
	*/
	QDomDocument doc("mech");
	if( !doc.setContent(&sfile, &message) ){
		sfile.close();
		return setError(PARSE_ERROR, "Could not parse document");
	}

	QDomElement ele = doc.documentElement();
	if( ele.tagName()!="Mechanism")
		return setError(PARSE_ERROR, "Expected \"Mechanism\"", ele.lineNumber());
	newmix.mechName = ele.attribute("name");
	if( ele.elementsByTagName("MechDescription").isEmpty() )
		return setError(PARSE_ERROR, "Expected \"MechDescription\"");
	newmix.mechDesc = ele.elementsByTagName("MechDescription").at(0).toElement().text();

	/************** Read the species ***************/
	if( ele.elementsByTagName("CpdList").isEmpty())
		return setError(PARSE_ERROR, "Expected \"CpdList\"");
	QDomNode cpdlist = ele.elementsByTagName("CpdList").at(0);
	for(QDomNode cpd=cpdlist.firstChild(); !cpd.isNull(); cpd=cpd.nextSibling())
	{
		if( cpd.toElement().tagName()!="Cpd" )
			return setError(PARSE_ERROR, "Expected \"Cpd\", got \""+cpd.toElement().tagName()+"\"");
		
		// parse basic information
		Cpd* newcpd = new Cpd(); bool ok;
		newcpd->setShortName(cpd.toElement().attribute("name"));
		newcpd->setState(cpd.toElement().attribute("state"), &ok);
		QDomNode child = cpd.firstChild();

		// parse components of a compound
		if(child.toElement().tagName()!="LongName")
			return setError(PARSE_ERROR, "Expected \"LongName\", got \""+cpd.toElement().tagName()+"\"", child.lineNumber());
		newcpd->setLongName(child.toElement().attribute("value"));
		child = child.nextSibling();
		if(child.toElement().tagName()!="Concentration")
			return setError(PARSE_ERROR, "Expected \"Concentration\", got \""+child.toElement().tagName()+"\"", child.lineNumber());
		newcpd->setInitialConc(child.toElement().attribute("value"));
		child = child.nextSibling();
		if(child.toElement().tagName()!="Threshold")
			return setError(PARSE_ERROR, "Expected \"Threshold\", got \""+child.toElement().tagName()+"\"", child.lineNumber());
		newcpd->setThreshold(child.toElement().attribute("value").toDouble());
		child = child.nextSibling();
		if(child.toElement().tagName()!="Sharpness")
			return setError(PARSE_ERROR, "Expected \"Sharpness\", got \""+child.toElement().tagName()+"\"", child.lineNumber());
		newcpd->setSharpness(child.toElement().attribute("value").toDouble());
		child = child.nextSibling();
		if(child.toElement().tagName()!="Transition")
			return setError(PARSE_ERROR, "Expected \"Transition\", got \""+child.toElement().tagName()+"\"", child.lineNumber());
		newcpd->setTransition(child.toElement().attribute("value"));

		// add the new cpd to the mix
		newmix.CpdList.append(newcpd);
	}

	/****************** Read the Step List *********************/
	if( ele.elementsByTagName("StepList").isEmpty() )
		return setError(PARSE_ERROR, "Expected \"StepList\"");
	QDomNode steplist = ele.elementsByTagName("StepList").at(0);
	for(QDomNode step=steplist.firstChild(); !step.isNull(); step=step.nextSibling())
	{
		if( step.toElement().tagName()!="Step" )
			return setError(PARSE_ERROR, "Expected \"Step\", got \""+step.toElement().tagName()+"\"", step.lineNumber());
		
		// parse essential data
		Step* newstep = new Step();
		newstep->setName( step.toElement().attribute("name") );
		
		// parse properties of the step
		QDomNode child = step.firstChild();
		if( child.toElement().tagName() != "Description" )
			return setError(PARSE_ERROR, "Expected \"Description\", got \""+child.toElement().tagName()+"\"", child.lineNumber());
		newstep->setDesc( child.toElement().text() );
		child = child.nextSibling();
		if( child.toElement().tagName() != "RatePlus" )
			return setError(PARSE_ERROR, "Expected \"RatePlus\", got \""+child.toElement().tagName()+"\"", child.lineNumber());
		newstep->setKPlus( child.toElement().attribute("value") );
		child = child.nextSibling();
		if( child.toElement().tagName() != "RateMinus" )
			return setError(PARSE_ERROR, "Expected \"RateMinus\", got \""+child.toElement().tagName()+"\"", child.lineNumber());
		newstep->setKMinus( child.toElement().attribute("value") );
		child = child.nextSibling();
		
		// parse the reactant list
		if( child.toElement().tagName() != "ReactantList" )
			return setError(PARSE_ERROR, "Expected \"ReactantList\", got \""+child.toElement().tagName()+"\"", child.lineNumber());
		for(QDomNode reactant=child.firstChild(); !reactant.isNull(); reactant=reactant.nextSibling())
		{
			if( reactant.toElement().tagName() != "Reactant" )
				return setError(PARSE_ERROR, "Expected \"Reactant\", got \""+reactant.toElement().tagName()+"\"", reactant.lineNumber());
			Cpd* temp = newmix.getCpdById( reactant.toElement().attribute("id") );
			if( temp!=NULL ) newstep->addReactant(temp);
			else return setError(ERROR, reactant.toElement().attribute("id")+" not found!", reactant.lineNumber());
		}
		child = child.nextSibling();
		
		// parse the product list
		if( child.toElement().tagName() != "ProductList" )
			return setError(PARSE_ERROR, "Expected \"ProductList\", got \""+child.toElement().tagName()+"\"", child.lineNumber());
		for(QDomNode product=child.firstChild(); !product.isNull(); product=product.nextSibling())
		{
			if( product.toElement().tagName() != "Product" )
				return setError(PARSE_ERROR, "Expected \"Product\", got \""+product.toElement().tagName()+"\"", product.lineNumber());
			Cpd* temp = newmix.getCpdById( product.toElement().attribute("id") );
			if( temp!=NULL ) newstep->addProduct(temp);
			else return setError(ERROR, product.toElement().attribute("id")+" not found!", product.lineNumber());
		}
		child = child.nextSibling();
	}

	/****************** Read the Parameter List *********************/
	if( ele.elementsByTagName("SimParams").isEmpty() )
		return setError(PARSE_ERROR, "Expected \"SimParams\"");
	QDomNode param = ele.elementsByTagName("SimParams").at(0).firstChild();
	
	if( param.toElement().tagName() != "TimeStep" )
		return setError(PARSE_ERROR, "Expected \"TimeStep\", got \""+param.toElement().tagName()+"\"", param.lineNumber());
	newmix.timeStep = param.toElement().attribute("value").toDouble();
	param = param.nextSibling();
	if( param.toElement().tagName() != "ReportStep" )
		return setError(PARSE_ERROR, "Expected \"ReportStep\", got \""+param.toElement().tagName()+"\"", param.lineNumber());
	newmix.reportStep = param.toElement().attribute("value").toDouble();
	param = param.nextSibling();
	if( param.toElement().tagName() != "StartTime" )
		return setError(PARSE_ERROR, "Expected \"StartTime\", got \""+param.toElement().tagName()+"\"", param.lineNumber());
	newmix.startTime = param.toElement().attribute("value").toDouble();
	param = param.nextSibling();
	if( param.toElement().tagName() != "EndTime" )
		return setError(PARSE_ERROR, "Expected \"EndTime\", got \""+param.toElement().tagName()+"\"", param.lineNumber());
	newmix.endTime = param.toElement().attribute("value").toDouble();
	param = param.nextSibling();
	if( param.toElement().tagName() != "DebugStart" )
		return setError(PARSE_ERROR, "Expected \"DebugStart\", got \""+param.toElement().tagName()+"\"", param.lineNumber());
	newmix.debugStart = param.toElement().attribute("value").toDouble();
	param = param.nextSibling();
	if( param.toElement().tagName() != "DebugEnd" )
		return setError(PARSE_ERROR, "Expected \"DebugEnd\", got \""+param.toElement().tagName()+"\"", param.lineNumber());
	newmix.debugEnd = param.toElement().attribute("value").toDouble();
	param = param.nextSibling();
	if( param.toElement().tagName() != "Precision" )
		return setError(PARSE_ERROR, "Expected \"Precision\", got \""+param.toElement().tagName()+"\"", param.lineNumber());
	newmix.precision = param.toElement().attribute("value").toDouble();
	param = param.nextSibling();
	if( param.toElement().tagName() != "Order" )
		return setError(PARSE_ERROR, "Expected \"Order\", got \""+param.toElement().tagName()+"\"", param.lineNumber());
	newmix.order = param.toElement().attribute("value").toInt();
	param = param.nextSibling();
	if( param.toElement().tagName() != "Method" )
		return setError(PARSE_ERROR, "Expected \"Method\", got \""+param.toElement().tagName()+"\"", param.lineNumber());
	newmix.method = param.toElement().attribute("value");
	param = param.nextSibling();
	if( param.toElement().tagName() != "Transition" )
		return setError(PARSE_ERROR, "Expected \"Transition\", got \""+param.toElement().tagName()+"\"", param.lineNumber());
	newmix.transition = param.toElement().attribute("value");
	param = param.nextSibling();
	if( param.toElement().tagName() != "Autostep" )
		return setError(PARSE_ERROR, "Expected \"Autostep\", got \""+param.toElement().tagName()+"\"", param.lineNumber());
	newmix.autostep = param.toElement().attribute("value")=="true";
	param = param.nextSibling();
	if( param.toElement().tagName() != "GateBand" )
		return setError(PARSE_ERROR, "Expected \"GateBand\", got \""+param.toElement().tagName()+"\"", param.lineNumber());
	newmix.gateband = param.toElement().attribute("value").toDouble();
	param = param.nextSibling();
	if( param.toElement().tagName() != "ShiftTest" )
		return setError(PARSE_ERROR, "Expected \"ShiftTest\", got \""+param.toElement().tagName()+"\"", param.lineNumber());
	newmix.shifttest = param.toElement().attribute("value").toInt();
	param = param.nextSibling();
	if( param.toElement().tagName() != "MaxReduce" )
		return setError(PARSE_ERROR, "Expected \"MaxReduce\", got \""+param.toElement().tagName()+"\"", param.lineNumber());
	newmix.maxreduce = param.toElement().attribute("value").toInt();
	param = param.nextSibling();
	if( param.toElement().tagName() != "StepFactor" )
		return setError(PARSE_ERROR, "Expected \"StepFactor\", got \""+param.toElement().tagName()+"\"", param.lineNumber());
	newmix.stepfactor = param.toElement().attribute("value").toDouble();
	param = param.nextSibling();
	
	
	// finally done loading!
	mix->clone(&newmix);
	setError(LOADED_CM4, "Loaded successfully");
	return true;
}

