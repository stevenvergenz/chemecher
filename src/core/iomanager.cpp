#include "iomanager.h"

IOManager *iomgr = new IOManager();

IOManager::IOManager()
{

}

bool IOManager::saveToCM3(QString sim, QString mech)
{
	/***************** write to the mechanism file *****************/

	//open the mechanism file
	QFile mfile(mech);
	if( !mfile.open( QFile::WriteOnly ) ){
		status = FS_ERROR;
		message = "Error opening file "+mech;
		return false;
	}

	//print header
	QTextStream mOut( &mfile );
	mOut << "'Generated by CheMecher v4 on ";
	mOut << QDateTime::currentDateTime().toString("ddd MMMM d yyyy hh:mm ap") << endl;
	mOut << "'Name: " + (mix->mechName.isEmpty() ? "<empty>" : mix->mechName) << endl;
	mOut << "'Desc: " + (mix->mechDesc.isEmpty() ? "<empty>" : mix->mechDesc) << endl;

	//write out the cpd list
	mOut << "'the list of compounds" << endl;
	mOut << mix->CpdList.size() << endl;
	for(int i=0; i<mix->CpdList.size(); i++)
		mOut << mix->CpdList[i]->tov3String() << endl;
	mOut << endl;

	//write out the step list
	mOut << "'the list of steps" << endl;
	mOut << mix->StepList.size() << endl;
	for(int i=0; i<mix->StepList.size(); i++)
		mOut << mix->StepList[i]->tov3String() << endl;
	mOut << endl;

	mfile.close();

	/****************** write to the simulation file *****************/

	//open the simulation file
	QFile sfile(sim);
	if( !sfile.open( QFile::WriteOnly ) ){
		status = FS_ERROR;
		message = "Error opening file "+sim;
		return false;
	}

	//print header
	QTextStream sOut( &sfile );
	sOut << "'Generated by CheMecher v4 on ";
	sOut << QDateTime::currentDateTime().toString("ddd MMMM d yyyy hh:mm ap") << endl;
	sOut << "'Created in conjunction with mechanism: "+mech << endl;
	sOut << endl;

	//output parameters
	sOut << "calcstep=" << mix->timeStep << endl;
	sOut << "reportstep=" << mix->reportStep << endl;
	sOut << "maxtime=" << mix->endTime-mix->startTime
		<< "   'from "<<mix->startTime<<" to "<<mix->endTime << endl;
	sOut << "order=" << mix->order << endl;
	sOut << "method=" << mix->method << endl;
	sOut << "transition=" << mix->transition << endl;
	sOut << endl;
	sOut << "autostep=" << (mix->autostep ? "yes" : "no") << endl;
	sOut << "gateband=" << (mix->autostep ? QString::number(mix->gateband) : "0") << endl;
	sOut << "shifttest=" << (mix->autostep ? QString::number(mix->shifttest) : "0") << endl;
	sOut << "maxreduce=" << (mix->autostep ? QString::number(mix->maxreduce) : "0") << endl;
	sOut << "stepfactor=" << (mix->autostep ? QString::number(mix->stepfactor) : "0") << endl;
	sOut << endl;

	//output the initial concentrations
	sOut << "'initial concentrations" << endl;
	sOut << "'any species not listed are assusmed to have an initial concentration of zero" << endl;
	for(int i=0; i<mix->CpdList.size(); i++)
		sOut << mix->CpdList[i]->toString() << " "
		<< mix->CpdList[i]->initialConc() << endl;

	//done writing, close file
	sfile.close();

	return true;
}

bool IOManager::loadFromCM3(QString sim, QString mech)
{
	Mix newmix;
	QFile sfile(sim), mfile(mech);

	/********************* start parsing the mech file ********************/

	//open the mech file
	if( !mfile.open( QFile::WriteOnly ) ){
		status = FS_ERROR;
		message = "Error opening file "+mech;
		return false;
	}

	//start reading
	QTextStream min(&mfile);
	int linecounter = 0;
	QString buffer;
	bool ok = true;

	//read the number of species
	buffer = min.readLine(); linecounter++;
	int numspecies = buffer.toInt(&ok, 10);
	if( !ok || numspecies<1){
		state = PARSE_ERROR;
		message = "Error line "+QString::number(linecounter)+": positive integer expected";
		return false;
	}

	//read the species
	for(int i=0; i<numspecies; i++)
	{

	}

	return true;
}

QString getLineWithoutComments(QTextStream& txt)
{

}


bool IOManager::saveToCM4(QString filename)
{
	filename;
	return false;
}

bool IOManager::loadFromCM4(QString filename)
{
	filename;
	return false;
}

